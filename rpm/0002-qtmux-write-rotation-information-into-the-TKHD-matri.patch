From 6850c6f5f549487754f766de63ba1565afc2cf04 Mon Sep 17 00:00:00 2001
From: Mohammed Hassan <mohammed.hassan@jolla.com>
Date: Thu, 5 Mar 2015 17:12:13 +0200
Subject: [PATCH 2/2] qtmux: write rotation information into the TKHD matrix

This patch handles the simple cases of 0, 90, 180 and 270

We simply catch the image orientation event and translate that into
the corresponding transformation matrix.

Based on the work of Andrew den Exter <andrew.den.exter@jollamobile.com>
---
 gst/isomp4/atoms.c    | 31 +++++++++++++++++++++++++++++++
 gst/isomp4/atoms.h    |  2 ++
 gst/isomp4/gstqtmux.c | 23 +++++++++++++++++++++++
 3 files changed, 56 insertions(+)

diff --git a/gst/isomp4/atoms.c b/gst/isomp4/atoms.c
index 8dd493e15..aa59a7e06 100644
--- a/gst/isomp4/atoms.c
+++ b/gst/isomp4/atoms.c
@@ -4443,6 +4443,37 @@ atom_trak_set_subtitle_type (AtomTRAK * trak, AtomsContext * context,
   return tx3g;
 }
 
+void
+atom_trak_set_video_transform (AtomTRAK * trak, gint rotation)
+{
+  switch (rotation) {
+  case 0:
+    trak->tkhd.matrix[0] = 1 << 16;
+    trak->tkhd.matrix[1] = 0;
+    trak->tkhd.matrix[3] = 0;
+    trak->tkhd.matrix[4] = 1 << 16;
+    break;
+  case 90:
+    trak->tkhd.matrix[0] = 0;
+    trak->tkhd.matrix[1] = 1 << 16;
+    trak->tkhd.matrix[3] = G_MAXUINT16 << 16;
+    trak->tkhd.matrix[4] = 0;
+    break;
+  case 180:
+    trak->tkhd.matrix[0] = G_MAXUINT16 << 16;
+    trak->tkhd.matrix[1] = 0;
+    trak->tkhd.matrix[3] = 0;
+    trak->tkhd.matrix[4] = G_MAXUINT16 << 16;
+    break;
+  case 270:
+    trak->tkhd.matrix[0] = 0;
+    trak->tkhd.matrix[1] = G_MAXUINT16 << 16;
+    trak->tkhd.matrix[3] = 1 << 16;
+    trak->tkhd.matrix[4] = 0;
+    break;
+  }
+}
+
 static void
 atom_mfhd_init (AtomMFHD * mfhd, guint32 sequence_number)
 {
diff --git a/gst/isomp4/atoms.h b/gst/isomp4/atoms.h
index d176d8e16..77d30bc0a 100644
--- a/gst/isomp4/atoms.h
+++ b/gst/isomp4/atoms.h
@@ -1065,6 +1065,8 @@ SampleTableEntryMP4V * atom_trak_set_video_type (AtomTRAK * trak, AtomsContext *
 SampleTableEntryTX3G * atom_trak_set_subtitle_type (AtomTRAK * trak, AtomsContext * context,
                                SubtitleSampleEntry * entry);
 
+void atom_trak_set_video_transform (AtomTRAK * trak, gint rotation);
+
 SampleTableEntryTMCD *
 atom_trak_set_timecode_type (AtomTRAK * trak, AtomsContext * context, guint trak_timescale, GstVideoTimeCode * tc);
 
diff --git a/gst/isomp4/gstqtmux.c b/gst/isomp4/gstqtmux.c
index 43b5b40c6..f45ef8fdb 100644
--- a/gst/isomp4/gstqtmux.c
+++ b/gst/isomp4/gstqtmux.c
@@ -6429,6 +6429,7 @@ gst_qt_mux_sink_event (GstAggregator * agg, GstAggregatorPad * agg_pad,
       GstTagSetter *setter = GST_TAG_SETTER (qtmux);
       GstTagMergeMode mode;
       gchar *code;
+      gchar *orientation;
 
       GST_OBJECT_LOCK (qtmux);
       mode = gst_tag_setter_get_tag_merge_mode (setter);
@@ -6467,6 +6468,28 @@ gst_qt_mux_sink_event (GstAggregator * agg, GstAggregatorPad * agg_pad,
         g_free (code);
       }
 
+      if (gst_tag_list_get_string (list, GST_TAG_IMAGE_ORIENTATION, &orientation)) {
+
+	if (qtmux_pad->trak) {
+	  gint rotation = -1;
+	  if (strcmp(orientation, "rotate-0") == 0)
+	    rotation = 0;
+	  else if (strcmp(orientation, "rotate-90") == 0)
+	    rotation = 90;
+	  else if (strcmp(orientation, "rotate-180") == 0)
+	    rotation = 180;
+	  else if (strcmp(orientation, "rotate-270") == 0)
+	    rotation = 270;
+
+	  if (rotation != -1) {
+	    GST_DEBUG_OBJECT (qtmux, "setting rotation to %d", rotation);
+	    atom_trak_set_video_transform (qtmux_pad->trak, rotation);
+	  }
+	}
+
+	g_free (orientation);
+      }
+
       gst_event_unref (event);
       event = NULL;
       ret = TRUE;
-- 
2.25.1

